Theprogramming languagePythonwas conceived in the late 1980s,[1]and its implementation was started in December 1989[2]byGuido van RossumatCWIinthe Netherlandsas a successor toABCcapable ofexception handlingand interfacing with theAmoeba operating system.[3]Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community,Benevolent Dictator for Life(BDFL).[4][5](However, Van Rossum stepped down as leader on July 12, 2018.[6]). Python was named after theBBC TVshowMonty Python's Flying Circus.[7]

Python 2.0 was released on October 16, 2000, with many major new features, such aslist comprehensions,cycle-detectinggarbage collector(in addition toreference counting) andreference counting, formemory managementand support forUnicode, along with a change to the development process itself, with a shift to a more transparent and community-backed process.[8]

Python 3.0, a major, backwards-incompatible release, was released on December 3, 2008[9]after a long period of testing. Many of its major features have also beenbackportedto the backwards-compatible, though now-unsupported, Python 2.6 and 2.7.[10]Releases of Python 3 include the2to3utility, which automates the translation of Python 2 code to Python 3.[11]

Early history

In February 1991, Van Rossum published the code (labeled version 0.9.0) to alt.sources.[12][13]Already present at this stage in development wereclasses with inheritance, exception handling, functions, and the coredatatypesoflist,dict,strand so on. Also in this initial release was amodule systemborrowed fromModula-3; Van Rossum describes the module as "one of Python's major programming units".[1]Python's exception model also resembles Modula-3's, with the addition of anelseclause.[3]In 1994comp.lang.python, the primarydiscussion forumfor Python, was formed, marking a milestone in the growth of Python's userbase and popularity.[1]

Version 1

Python reached version 1.0 in January 1994. The major new features included in this release were the functional programming toolslambda,map,filterandreduce. Van Rossum stated that "Python acquired lambda, reduce(), filter() and map(), courtesy of aLisphacker who missed them and submitted workingpatches".[14]

The last version released while Van Rossum was at CWI was Python 1.2.  In 1995, Van Rossum continued his work on Python at theCorporation for National Research Initiatives(CNRI) inReston,Virginiafrom where he released several versions.

By version 1.4, Python had acquired several new features. Notable among these are the Modula-3 inspiredkeyword arguments(which are also similar toCommon Lisp's keyword arguments) and built-in support forcomplex numbers. Also included is a basic form ofdata hidingbyname mangling, though this is easily bypassed.[15]

During Van Rossum's stay at CNRI, he launched the Computer Programming for Everybody (CP4E) initiative, intending to make programming more accessible to more people, with a basic "literacy" in programming languages, similar to the basic English literacy and mathematics skills required by most employers. Python served a central role in this: because of its focus on clean syntax, it was already suitable, and CP4E's goals bore similarities to its predecessor, ABC. The project was funded byDARPA.[16]As of 2007[update], the CP4E project is inactive, and while Python attempts to be easily learnable and not too arcane in its syntax and semantics, outreach to non-programmers is not an active concern.[17]

BeOpen

In 2000, the Python core development team moved to BeOpen.com[18]to form the BeOpen PythonLabs team.[19][20]CNRI requested that a version 1.6 be released, summarizing Python's development up to the point at which the development team left CNRI. Consequently, the release schedules for 1.6 and 2.0 had a significant amount of overlap.[8]Python 2.0 was the only release from BeOpen.com. After Python 2.0 was released by BeOpen.com, Guido van Rossum and the other PythonLabs developers joinedDigital Creations.

The Python 1.6 release included a new CNRI license that was substantially longer than the CWI license that had been used for earlier releases.  The new license included a clause stating that the license was governed by thelawsof theState of Virginia.  TheFree Software Foundationargued that the choice-of-law clause was incompatible with theGNU General Public License.  BeOpen, CNRI and the FSF negotiated a change to Python'sfree-software licensethat would make it GPL-compatible.  Python 1.6.1 is essentially the same as Python 1.6, with a few minor bug fixes, and with the new GPL-compatible license.[21]

Version 2

Python 2.0, released October 2000,[8]introducedlist comprehensions, a feature borrowed from thefunctional programminglanguagesSETLandHaskell. Python's syntax for this construct is very similar to Haskell's, apart from Haskell's preference forpunctuationcharacters and Python's preference for alphabetic keywords. Python 2.0 also introduced a garbage collector able to collect reference cycles.[8]

Python 2.1 was close to Python 1.6.1, as well as Python 2.0. Its license was renamedPython Software Foundation License. All code, documentation and specifications added, from the time of Python 2.1's alpha release on, is owned by thePython Software Foundation(PSF), anonprofit organizationformed in 2001, modeled after theApache Software Foundation.[21]The release included a change to the language specification to support nested scopes, like otherstatically scopedlanguages.[22](The feature was turned off by default, and not required, until Python 2.2.)

Python 2.2 was released in December 2001;[23]a major innovation was the unification of Python's types (types written inC) and classes (types written in Python) into one hierarchy. This single unification made Python's object model purely and consistently object oriented.[24]Also added weregeneratorswhich were inspired byIcon.[25]

Python 2.5 was released in September 2006[26]and introduced thewithstatement, which encloses a code block within a context manager (for example, acquiring alockbefore the block of code is run and releasing the lock afterwards, or opening afileand then closing it), allowingresource acquisition is initialization(RAII)-like behavior and replacing a common try/finally idiom.[27]

Python 2.6 was released to coincide with Python 3.0, and included some features from that release, as well as a "warnings" mode that highlighted the use of features that were removed in Python 3.0.[28][10]Similarly, Python 2.7 coincided with and included features from Python 3.1,[29]which was released on June 26, 2009.
Parallel 2.x and 3.x releases then ceased, and Python 2.7 was the last release in the 2.x series.[30]In November 2014, it was announced that Python 2.7 would be supported until 2020, but users were encouraged to move to Python 3 as soon as possible.[31]Python 2.7 support ended on January 1, 2020, along withcode freezeof 2.7 development branch. A final release, 2.7.18, occurred on April 20, 2020, and included fixes for critical bugs and release blockers.[32]This marked theend-of-lifeof Python 2.[33]

Version 3

Python 3.0 (also called "Python 3000" or "Py3K") was released on December 3, 2008.[9]It was designed to rectify fundamental design flaws in the language – the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number.  The guiding principle of Python 3 was: "reduce feature duplication by removing old ways of doing things".[34]

Python 3.0 was developed with the same philosophy as in prior versions.  However, as Python had accumulated new and redundant ways to program the same task, Python 3.0 had an emphasis on removing duplicative constructs and modules, in keeping with theZen of Python: "There should be one— and preferably only one —obvious way to do it".

Nonetheless, Python 3.0 remained amulti-paradigm language.  Coders could still followobject-oriented,structured, andfunctionalprogramming paradigms, among others, but within such broad choices, the details were intended to be more obvious in Python 3.0 than they were in Python 2.x.

Compatibility

Python 3.0 broke backward compatibility, and much Python 2 code does not run unmodified on Python 3.[35]Python'sdynamic typingcombined with the plans to change the semantics of certain methods of dictionaries, for example, made perfectmechanical translationfrom Python 2.x to Python 3.0 very difficult. A tool called "2to3" does the parts of translation that can be done automatically.  At this,2to3appeared to be fairly successful, though an early review noted that there were aspects of translation that such a tool would never be able to handle.[36]Prior to the roll-out of Python 3, projects requiring compatibility with both the 2.x and 3.x series were recommended to have one source (for the 2.x series), and produce releases for the Python 3.x platform using2to3. Edits to the Python 3.x code were discouraged for so long as the code needed to run on Python 2.x.[10]This is no longer recommended; as of 2012 the preferred approach was to create a single code base that can run under both Python 2 and 3 using compatibility modules.[37]

Features

Some of the major changes included for Python 3.0 were:

Subsequent releases in the Python 3.x series have included additional, substantial new features; all ongoing development of the language is done in the 3.x series.

Table of versions

Releases before numbered versions:

Table notes:

Support

See also

References

External links